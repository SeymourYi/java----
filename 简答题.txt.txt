什么是 MyBatis？（5分）
定义：MyBatis 是一款基于 Java 的持久层框架，它通过 XML 或注解配置 SQL 映射，将 Java 对象（POJO）与数据库记录灵活映射。

核心特性：

简化 JDBC 冗余代码（如手动设置参数、处理结果集）。

支持动态 SQL（如 if、foreach 标签）。

提供一级/二级缓存机制。

与 Spring 等框架无缝集成。

2. MyBatis 中模糊查询 like 语句该怎么写？（5分）
方式一：XML 中使用 concat 函数（防 SQL 注入）
xml
<select id="searchUser" resultType="User">
  SELECT * FROM user WHERE name LIKE concat('%', #{keyword}, '%')
</select>
方式二：注解中使用 ${}（需手动防注入，不推荐）
java
@Select("SELECT * FROM user WHERE name LIKE '%${keyword}%'")
List<User> searchUser(String keyword);
方式三：Java 代码中拼接参数（推荐）
java
String keyword = "%" + input + "%";
userMapper.searchUser(keyword);
3. MyBatis 获取自增主键的方式有哪些？（5分）
方法一：useGeneratedKeys（XML 配置）
xml
<insert id="insertUser" useGeneratedKeys="true" keyProperty="id">
  INSERT INTO user(name) VALUES(#{name})
</insert>
说明：插入后，自增主键会自动回填到参数对象的 id 属性。

方法二：<selectKey> 标签（适用于非自增主键）
xml
<insert id="insertUser">
  <selectKey keyProperty="id" resultType="int" order="AFTER">
    SELECT LAST_INSERT_ID()
  </selectKey>
  INSERT INTO user(name) VALUES(#{name})
</insert>
4. MyBatis 是否支持延迟加载？实现原理是什么？（5分）
支持：通过配置 lazyLoadingEnabled=true 开启。

原理：

代理对象：MyBatis 创建目标对象的代理（如 User 的代理）。

触发时机：当调用代理对象的关联属性（如 user.getOrders()）时，才执行关联 SQL 查询。

配置项：

xml
<settings>
  <setting name="lazyLoadingEnabled" value="true"/>
</settings>
5. 什么是 Spring 框架？主要模块有哪些？（5分）
定义：Spring 是一个轻量级、一站式 Java 开发框架，核心是 IoC（控制反转） 和 AOP（面向切面编程）。

主要模块：

模块	功能
Core Container	IoC 容器（BeanFactory、ApplicationContext）
AOP	面向切面编程（日志、事务管理）
DAO	数据库操作（JDBC 异常抽象层）
ORM	整合 Hibernate/MyBatis 等
Web MVC	MVC 架构实现（DispatcherServlet）
Test	单元测试支持
6. Spring 依赖注入的方式有哪些？（5分）
方式一：构造器注入（推荐）
java
@Autowired
public UserService(UserRepository repository) {
  this.repository = repository;
}
方式二：Setter 注入
java
@Autowired
public void setRepository(UserRepository repository) {
  this.repository = repository;
}
方式三：字段注入（简单但不推荐）
java
@Autowired
private UserRepository repository;
方式四：接口注入（已淘汰）
通过实现特定接口（如 BeanFactoryAware）注入。